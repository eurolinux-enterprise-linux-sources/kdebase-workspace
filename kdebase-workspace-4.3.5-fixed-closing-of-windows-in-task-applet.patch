diff --git a/libs/taskmanager/groupmanager.cpp b/libs/taskmanager/groupmanager.cpp
index 7c33ae8..2e12384 100644
--- a/libs/taskmanager/groupmanager.cpp
+++ b/libs/taskmanager/groupmanager.cpp
@@ -74,7 +74,7 @@ public:
     void currentDesktopChanged(int);
     void taskChanged(TaskPtr, ::TaskManager::TaskChanges);
     void checkScreenChange();
-    void taskItemDestroyed(AbstractGroupableItem *);
+    void taskDestroyed(QObject *item);
     void startupItemDestroyed(AbstractGroupableItem *);
     void checkIfFull();
     void actuallyCheckIfFull();
@@ -285,8 +285,8 @@ bool GroupManagerPrivate::addTask(TaskPtr task)
             item = new TaskItem(q, task);
         }
 
-        QObject::connect(item, SIGNAL(destroyed(AbstractGroupableItem*)),
-                         q, SLOT(taskItemDestroyed(AbstractGroupableItem*)));
+        QObject::connect(task.data(), SIGNAL(destroyed(QObject*)),
+                         q, SLOT(taskDestroyed(QObject*)));
 
         //Find a fitting group for the task with GroupingStrategies
         if (abstractGroupingStrategy && !task->demandsAttention()) { //do not group attention tasks
@@ -322,10 +322,12 @@ void GroupManagerPrivate::removeTask(TaskPtr task)
     //the item must exist as long as the TaskPtr does because of activate calls so don't delete the item here, it will delete itself.
 }
 
-void GroupManagerPrivate::taskItemDestroyed(AbstractGroupableItem *item)
+void GroupManagerPrivate::taskDestroyed(QObject *item)
 {
-    TaskItem *taskItem = static_cast<TaskItem*>(item);
-    geometryTasks.remove(taskItem->task());
+    Task *task = qobject_cast<Task*>(item);
+    if (task) {
+        geometryTasks.remove(TaskPtr(task));
+    }
 }
 
 void GroupManagerPrivate::startupItemDestroyed(AbstractGroupableItem *item)
diff --git a/libs/taskmanager/groupmanager.h b/libs/taskmanager/groupmanager.h
index 515e29c..362cef7 100644
--- a/libs/taskmanager/groupmanager.h
+++ b/libs/taskmanager/groupmanager.h
@@ -131,7 +131,7 @@ private:
     Q_PRIVATE_SLOT(d, void currentDesktopChanged(int))
     Q_PRIVATE_SLOT(d, void taskChanged(TaskPtr, ::TaskManager::TaskChanges))
     Q_PRIVATE_SLOT(d, void checkScreenChange())
-    Q_PRIVATE_SLOT(d, void taskItemDestroyed(AbstractGroupableItem *))
+    Q_PRIVATE_SLOT(d, void checkScreenChange())
     Q_PRIVATE_SLOT(d, void startupItemDestroyed(AbstractGroupableItem *))
     Q_PRIVATE_SLOT(d, void checkIfFull())
     Q_PRIVATE_SLOT(d, void actuallyCheckIfFull())
diff --git a/libs/taskmanager/taskitem.cpp b/libs/taskmanager/taskitem.cpp
index f98235e..e9fea30 100644
--- a/libs/taskmanager/taskitem.cpp
+++ b/libs/taskmanager/taskitem.cpp
@@ -34,12 +34,11 @@ class TaskItem::Private
 {
 public:
     Private()
-        :task(0),
-         startupTask(0)
+        : startupTask(0)
     {
     }
 
-    TaskPtr task;
+    QWeakPointer<Task> task;
     StartupPtr startupTask;
 };
 
@@ -48,7 +47,7 @@ TaskItem::TaskItem(QObject *parent, TaskPtr task)
     : AbstractGroupableItem(parent),
       d(new Private)
 {
-    d->task = task;
+    d->task = task.data();
     connect(task.data(), SIGNAL(changed(::TaskManager::TaskChanges)),
             this, SIGNAL(changed(::TaskManager::TaskChanges)));
     connect(task.data(), SIGNAL(destroyed(QObject*)), this, SLOT(taskDestroyed())); //this item isn't useful anymore if the Task was closed
@@ -75,8 +74,8 @@ TaskItem::~TaskItem()
 
 void TaskItem::taskDestroyed()
 {
-    d->task = 0;
     d->startupTask = 0;
+    d->task.clear();
     deleteLater();
 }
 
@@ -87,12 +86,12 @@ void TaskItem::setTaskPointer(TaskPtr task)
         d->startupTask = 0;
     }
 
-    if (d->task != task) {
+    if (d->task.data() != task.data()) {
         if (d->task) {
             disconnect(d->task.data(), 0, this, 0);
         }
 
-        d->task = task;
+        d->task = task.data();
         connect(task.data(), SIGNAL(changed(::TaskManager::TaskChanges)),
                 this, SIGNAL(changed(::TaskManager::TaskChanges)));
         connect(task.data(), SIGNAL(destroyed()), this, SLOT(deleteLater()));
@@ -107,7 +106,7 @@ TaskPtr TaskItem::task() const
         kDebug() << "pointer is Null";
     }
     */
-    return d->task;
+    return TaskPtr(d->task.data());
 }
 
 StartupPtr TaskItem::startup() const
@@ -127,7 +126,7 @@ WindowList TaskItem::winIds() const
         return WindowList();
     }
     WindowList list;
-    list << d->task->window();
+    list << d->task.data()->window();
     return list;
 }
 
@@ -136,7 +135,7 @@ QIcon TaskItem::icon() const
     if (!d->task) {
         return QIcon();
     }
-    return d->task->icon();
+    return d->task.data()->icon();
 }
 
 QString TaskItem::name() const
@@ -144,7 +143,7 @@ QString TaskItem::name() const
     if (!d->task) {
         return QString();
     }
-    return d->task->visibleName();
+    return d->task.data()->visibleName();
 }
 
 void TaskItem::setShaded(bool state)
@@ -152,7 +151,7 @@ void TaskItem::setShaded(bool state)
     if (!d->task) {
         return;
     }
-    d->task->setShaded(state);
+    d->task.data()->setShaded(state);
 }
 
 void TaskItem::toggleShaded()
@@ -160,7 +159,7 @@ void TaskItem::toggleShaded()
     if (!d->task) {
         return;
     }
-    d->task->toggleShaded();
+    d->task.data()->toggleShaded();
 }
 
 bool TaskItem::isShaded() const
@@ -168,7 +167,7 @@ bool TaskItem::isShaded() const
     if (!d->task) {
         return false;
     }
-    return d->task->isShaded();
+    return d->task.data()->isShaded();
 }
 
 void TaskItem::toDesktop(int desk)
@@ -176,17 +175,17 @@ void TaskItem::toDesktop(int desk)
     if (!d->task) {
         return;
     }
-    d->task->toDesktop(desk);
+    d->task.data()->toDesktop(desk);
 }
 
 bool TaskItem::isOnCurrentDesktop() const
 {
-    return d->task && d->task->isOnCurrentDesktop();
+    return d->task && d->task.data()->isOnCurrentDesktop();
 }
 
 bool TaskItem::isOnAllDesktops() const
 {
-    return d->task && d->task->isOnAllDesktops();
+    return d->task && d->task.data()->isOnAllDesktops();
 }
 
 int TaskItem::desktop() const
@@ -194,7 +193,7 @@ int TaskItem::desktop() const
     if (!d->task) {
         return 0;
     }
-    return d->task->desktop();
+    return d->task.data()->desktop();
 }
 
 void TaskItem::setMaximized(bool state)
@@ -202,7 +201,7 @@ void TaskItem::setMaximized(bool state)
     if (!d->task) {
         return;
     }
-    d->task->setMaximized(state);
+    d->task.data()->setMaximized(state);
 }
 
 void TaskItem::toggleMaximized()
@@ -210,12 +209,12 @@ void TaskItem::toggleMaximized()
     if (!d->task) {
         return;
     }
-    d->task->toggleMaximized();
+    d->task.data()->toggleMaximized();
 }
 
 bool TaskItem::isMaximized() const
 {
-    return d->task && d->task->isMaximized();
+    return d->task && d->task.data()->isMaximized();
 }
 
 void TaskItem::setMinimized(bool state)
@@ -223,7 +222,7 @@ void TaskItem::setMinimized(bool state)
     if (!d->task) {
         return;
     }
-    d->task->setIconified(state);
+    d->task.data()->setIconified(state);
 }
 
 void TaskItem::toggleMinimized()
@@ -231,7 +230,7 @@ void TaskItem::toggleMinimized()
     if (!d->task) {
         return;
     }
-    d->task->toggleIconified();
+    d->task.data()->toggleIconified();
 }
 
 bool TaskItem::isMinimized() const
@@ -239,7 +238,7 @@ bool TaskItem::isMinimized() const
     if (!d->task) {
         return false;
     }
-    return d->task->isMinimized();
+    return d->task.data()->isMinimized();
 }
 
 void TaskItem::setFullScreen(bool state)
@@ -247,7 +246,7 @@ void TaskItem::setFullScreen(bool state)
     if (!d->task) {
         return;
     }
-    d->task->setFullScreen(state);
+    d->task.data()->setFullScreen(state);
 }
 
 void TaskItem::toggleFullScreen()
@@ -255,7 +254,7 @@ void TaskItem::toggleFullScreen()
     if (!d->task) {
         return;
     }
-    d->task->toggleFullScreen();
+    d->task.data()->toggleFullScreen();
 }
 
 bool TaskItem::isFullScreen() const
@@ -263,7 +262,7 @@ bool TaskItem::isFullScreen() const
     if (!d->task) {
         return false;
     }
-    return d->task->isFullScreen();
+    return d->task.data()->isFullScreen();
 }
 
 void TaskItem::setKeptBelowOthers(bool state)
@@ -271,7 +270,7 @@ void TaskItem::setKeptBelowOthers(bool state)
     if (!d->task) {
         return;
     }
-    d->task->setKeptBelowOthers(state);
+    d->task.data()->setKeptBelowOthers(state);
 }
 
 void TaskItem::toggleKeptBelowOthers()
@@ -279,7 +278,7 @@ void TaskItem::toggleKeptBelowOthers()
     if (!d->task) {
         return;
     }
-    d->task->toggleKeptBelowOthers();
+    d->task.data()->toggleKeptBelowOthers();
 }
 
 bool TaskItem::isKeptBelowOthers() const
@@ -287,7 +286,7 @@ bool TaskItem::isKeptBelowOthers() const
     if (!d->task) {
         return false;
     }
-    return d->task->isKeptBelowOthers();
+    return d->task.data()->isKeptBelowOthers();
 }
 
 void TaskItem::setAlwaysOnTop(bool state)
@@ -295,7 +294,7 @@ void TaskItem::setAlwaysOnTop(bool state)
     if (!d->task) {
         return;
     }
-    d->task->setAlwaysOnTop(state);
+    d->task.data()->setAlwaysOnTop(state);
 }
 
 void TaskItem::toggleAlwaysOnTop()
@@ -303,7 +302,7 @@ void TaskItem::toggleAlwaysOnTop()
     if (!d->task) {
         return;
     }
-    d->task->toggleAlwaysOnTop();
+    d->task.data()->toggleAlwaysOnTop();
 }
 
 bool TaskItem::isAlwaysOnTop() const
@@ -311,12 +310,12 @@ bool TaskItem::isAlwaysOnTop() const
     if (!d->task) {
         return false;
     }
-    return d->task->isAlwaysOnTop();
+    return d->task.data()->isAlwaysOnTop();
 }
 
 bool TaskItem::isActionSupported(NET::Action action) const
 {
-    return d->task && d->task->info().actionSupported(action);
+    return d->task && d->task.data()->info().actionSupported(action);
 }
 
 void TaskItem::addMimeData(QMimeData *mimeData) const
@@ -325,7 +324,7 @@ void TaskItem::addMimeData(QMimeData *mimeData) const
         return;
     }
 
-    d->task->addMimeData(mimeData);
+    d->task.data()->addMimeData(mimeData);
 }
 
 void TaskItem::close()
@@ -333,7 +332,7 @@ void TaskItem::close()
     if (!d->task) {
         return;
     }
-    d->task->close();
+    d->task.data()->close();
 }
 
 bool TaskItem::isActive() const
@@ -341,7 +340,7 @@ bool TaskItem::isActive() const
     if (!d->task) {
         return false;
     }
-    return d->task->isActive();
+    return d->task.data()->isActive();
 }
 
 bool TaskItem::demandsAttention() const
@@ -349,7 +348,7 @@ bool TaskItem::demandsAttention() const
     if (!d->task) {
         return false;
     }
-    return d->task->demandsAttention();
+    return d->task.data()->demandsAttention();
 }
 
 } // TaskManager namespace
diff --git a/libs/taskmanager/taskmanager.cpp b/libs/taskmanager/taskmanager.cpp
index f1a8824..9fc3319 100644
--- a/libs/taskmanager/taskmanager.cpp
+++ b/libs/taskmanager/taskmanager.cpp
@@ -283,6 +283,7 @@ void TaskManager::windowRemoved(WId w)
         }
 
         //kDebug() << "TM: Task for WId " << w << " removed.";
+        t->deleteLater();
     }
     else
     {
